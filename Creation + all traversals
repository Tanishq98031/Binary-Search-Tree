package com.company;

import java.util.*;

class NodeBst
{
    int data;
    NodeBst left;
    NodeBst right;

    NodeBst(int data)
    {
        this.data =data;
        this.left = null;
        this.right = null;
    }
}

public class LearningBST {
    public static void main(String[] args) {

        NodeBst root = null;

        int [] arr = {3,2,5,1,4,6};

        for(int i = 0; i < arr.length; i++)
        {
            int d = arr[i];
            root = insertintobst(root, d);
        }

        System.out.print("Levelorder Traversal: ");
        levelorderTraversal(root);
        System.out.println();

        System.out.print("Preorder Traversal: ");
        preorderTraversal(root);
        System.out.println();

        System.out.print("Inorder Traversal: ");
        inorderTraversal(root);
        System.out.println();

        System.out.print("Postorder Traversal: ");
        postTraversal(root);
        System.out.println();

    }

    public static NodeBst insertintobst(NodeBst root, int d)
    {
        if(root == null)
        {
            root = new NodeBst(d);
            return root;
        }

        if(d < root.data)
        {
            root.left = insertintobst(root.left, d);
        }
        else
        {
            root.right = insertintobst(root.right, d);
        }
        return root;
    }

    public static void levelorderTraversal(NodeBst root)
    {
        Queue<NodeBst> q = new LinkedList<>();

        q.offer(root);

        while(!q.isEmpty())
        {
            NodeBst temp = q.poll();
            System.out.print(temp.data + " ");

            if(temp.left != null)
            {
                q.offer(temp.left);
            }
            if(temp.right != null)
            {
                q.offer(temp.right);
            }
        }
    }

    public static void inorderTraversal(NodeBst root)
    {
        if(root == null) return;

        inorderTraversal(root.left);
        System.out.print(root.data + " ");
        inorderTraversal(root.right);
    }

    public static void preorderTraversal(NodeBst root)
    {
        if(root == null) return;

        System.out.print(root.data + " ");
        preorderTraversal(root.left);
        preorderTraversal(root.right);
    }

    public static void postTraversal(NodeBst root)
    {
        if(root == null) return;

        postTraversal(root.left);
        postTraversal(root.right);
        System.out.print(root.data + " ");
    }
}
